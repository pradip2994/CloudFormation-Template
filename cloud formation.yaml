---


Resources:

 # create VPC

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: newVPC

 # create public and Private subnet

  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: Public_Subnet
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: Private_Subnet

 # create internet Gateway

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

 # create Public and Private Route Table

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

 # Give Internet route to Route Table

  DefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

 # Public and Private Subnet Association

  AssociatePublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyPublicRouteTable

  AssociatePrivateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateRouteTable
      

 # My Public Instance
  MyPublicInstance:
    Type: AWS::EC2::Instance
    Properties:      
      ImageId: ami-0f5ee92e2d63afc18
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref ServerASecurityGroup
      SubnetId: !Ref MyPublicSubnet
      KeyName: mydemokey 
      Tags:
        - Key: Name
          Value: Public_Instance

 # Security group of Public Instance
  ServerASecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  enabled ssh and http ports
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      Tags: 
        - Key: Name
          Value: Public-SG

 # My Private Instance

  MyPrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f5ee92e2d63afc18
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref ServerBSecurityGroup
      SubnetId: !Ref MyPrivateSubnet
      KeyName: mydemokey
      Tags:
        - Key: Name
          Value: Private_Instance

  # security group of Private Instance

  ServerBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  enabled ssh 
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      Tags:
      - Key: Name
        Value: Private-SG

 # an Elastic IP for our Public Instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyPublicInstance
